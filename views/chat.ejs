<div class="chat-container">
    <header class="chat-header">
        <h1>BBWhatsApp</h1>
        <a href="/logout" class="btn">Logout</a>
    </header>
    
    <div class="chat-messages" id="chat-messages">
        <% messages.forEach(msg => { %>
            <% if(msg.type === 'system') { %>
                <div class="system-message">
                    <span><%= msg.text %></span>
                </div>
            <% } else { %>
                <div class="message <%= msg.username === user.username ? 'own-message' : 'received-message' %>">
                    <p class="meta">
                        <%= msg.username %>
                        <span><%= new Date(msg.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %></span>
                    </p>
                    <p class="text"><%= msg.text %></p>
                </div>
            <% } %>
        <% }); %>
    </div>
    
    <div class="chat-form-container">
        <form id="chat-form">
            <input type="text" id="msg" placeholder="Type your message..." required autocomplete="off">
            <button class="btn">Send</button>
        </form>
    </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const socket = io();
        const chatForm = document.getElementById('chat-form');
        const chatMessages = document.getElementById('chat-messages');
        const username = '<%= user.username %>';

        // Join chat
        socket.emit('join', username);

        // Message from server
        socket.on('message', message => {
            const div = document.createElement('div');
            
            if(message.type === 'system') {
                div.classList.add('system-message');
                div.innerHTML = `<span>${message.text}</span>`;
            } else {
                const messageClass = message.username === username ? 'own-message' : 'received-message';
                div.classList.add('message', messageClass);
                div.innerHTML = `
                    <p class="meta">
                        ${message.username}
                        <span>${new Date(message.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
                    </p>
                    <p class="text">${message.text}</p>
                `;
            }
            
            chatMessages.appendChild(div);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        // Message submit
        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const msg = e.target.elements.msg.value;
            
            // Emit message to server
            socket.emit('chatMessage', { 
                text: msg 
            });
            
            // Clear input
            e.target.elements.msg.value = '';
            e.target.elements.msg.focus();
        });

        // Load message history
        socket.on('messageHistory', (history) => {
            chatMessages.innerHTML = ''; // Clear existing messages
            
            history.forEach(message => {
                const div = document.createElement('div');
                
                if(message.type === 'system') {
                    div.classList.add('system-message');
                    div.innerHTML = `<span>${message.text}</span>`;
                } else {
                    const messageClass = message.username === username ? 'own-message' : 'received-message';
                    div.classList.add('message', messageClass);
                    div.innerHTML = `
                        <p class="meta">
                            ${message.username}
                            <span>${new Date(message.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</span>
                        </p>
                        <p class="text">${message.text}</p>
                    `;
                }
                
                chatMessages.appendChild(div);
            });
            
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });
    });
</script>
